/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface GameContract extends Truffle.Contract<GameInstance> {
  "new"(
    _MPOT: string,
    _TCP: string,
    _bTCP: string,
    meta?: Truffle.TransactionDetails
  ): Promise<GameInstance>;
}

export interface BattleCreated {
  name: "BattleCreated";
  args: {
    battleId: BN;
    challenger: string;
    charger: string;
    bTCPAmount: BN;
    TCPAmount: BN;
    startTime: BN;
    expireTime: BN;
    trancheId: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface SetWinner {
  name: "SetWinner";
  args: {
    battleId: BN;
    winner: string;
    0: BN;
    1: string;
  };
}

export interface TrancheAdded {
  name: "TrancheAdded";
  args: {
    index: BN;
    amount: BN;
    duration: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface TrancheRemoved {
  name: "TrancheRemoved";
  args: {
    index: BN;
    0: BN;
  };
}

type AllEvents =
  | BattleCreated
  | OwnershipTransferred
  | SetWinner
  | TrancheAdded
  | TrancheRemoved;

export interface GameInstance extends Truffle.ContractInstance {
  GCs(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  MAX_BATTLE_DURATION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MPOT(txDetails?: Truffle.TransactionDetails): Promise<string>;

  TCP(txDetails?: Truffle.TransactionDetails): Promise<string>;

  addBattleTranche: {
    (
      _wagerAmount: number | BN | string,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _wagerAmount: number | BN | string,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _wagerAmount: number | BN | string,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _wagerAmount: number | BN | string,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  bTCP(txDetails?: Truffle.TransactionDetails): Promise<string>;

  battleId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  battles(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
  }>;

  createBattle: {
    (
      _challenger: string,
      _charger: string,
      _trancheId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _challenger: string,
      _charger: string,
      _trancheId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _challenger: string,
      _charger: string,
      _trancheId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _challenger: string,
      _charger: string,
      _trancheId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  endBattle: {
    (
      _battleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _battleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _battleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _battleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeBattleTranche: {
    (
      _trancheId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _trancheId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _trancheId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _trancheId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setWinner: {
    (
      _battleId: number | BN | string,
      _winner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _battleId: number | BN | string,
      _winner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _battleId: number | BN | string,
      _winner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _battleId: number | BN | string,
      _winner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  trancheId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  tranches(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    GCs(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    MAX_BATTLE_DURATION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MPOT(txDetails?: Truffle.TransactionDetails): Promise<string>;

    TCP(txDetails?: Truffle.TransactionDetails): Promise<string>;

    addBattleTranche: {
      (
        _wagerAmount: number | BN | string,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _wagerAmount: number | BN | string,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _wagerAmount: number | BN | string,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _wagerAmount: number | BN | string,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    bTCP(txDetails?: Truffle.TransactionDetails): Promise<string>;

    battleId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    battles(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: BN;
    }>;

    createBattle: {
      (
        _challenger: string,
        _charger: string,
        _trancheId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _challenger: string,
        _charger: string,
        _trancheId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _challenger: string,
        _charger: string,
        _trancheId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _challenger: string,
        _charger: string,
        _trancheId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    endBattle: {
      (
        _battleId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _battleId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _battleId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _battleId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    removeBattleTranche: {
      (
        _trancheId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _trancheId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _trancheId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _trancheId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setWinner: {
      (
        _battleId: number | BN | string,
        _winner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _battleId: number | BN | string,
        _winner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _battleId: number | BN | string,
        _winner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _battleId: number | BN | string,
        _winner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    trancheId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    tranches(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
