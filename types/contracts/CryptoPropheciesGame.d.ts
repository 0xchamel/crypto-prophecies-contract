/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CryptoPropheciesGameContract
  extends Truffle.Contract<CryptoPropheciesGameInstance> {
  "new"(
    _MPOT: string,
    _TCP: string,
    _kfBurnAddr: string,
    _kfDailyPrizeAddr: string,
    _kfCustodyAddr: string,
    _ctDailyPrize: string,
    meta?: Truffle.TransactionDetails
  ): Promise<CryptoPropheciesGameInstance>;
}

export interface BattleCreated {
  name: "BattleCreated";
  args: {
    battleId: BN;
    player1: string;
    player2: string;
    wagerAmount: BN;
    timestamp: BN;
    player1ProphetId: BN;
    player2ProphetId: BN;
    player1ProphetTier: BN;
    player2ProphetTier: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
  };
}

export interface BattleEnded {
  name: "BattleEnded";
  args: {
    battleId: BN;
    winner: string;
    0: BN;
    1: string;
  };
}

export interface CTDailyPrizeUpdated {
  name: "CTDailyPrizeUpdated";
  args: {
    account: string;
    0: string;
  };
}

export interface DailyPrizeTicketAdded {
  name: "DailyPrizeTicketAdded";
  args: {
    account: string;
    amount: BN;
    timestamp: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface KFBurnAddressUpdated {
  name: "KFBurnAddressUpdated";
  args: {
    account: string;
    0: string;
  };
}

export interface KFCustodyAddressUpdated {
  name: "KFCustodyAddressUpdated";
  args: {
    account: string;
    0: string;
  };
}

export interface KFDailyPrizeAddressUpdated {
  name: "KFDailyPrizeAddressUpdated";
  args: {
    account: string;
    0: string;
  };
}

export interface KingdomFeeDeducted {
  name: "KingdomFeeDeducted";
  args: {
    amount: BN;
    0: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface WinBattleFunds {
  name: "WinBattleFunds";
  args: {
    account: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | BattleCreated
  | BattleEnded
  | CTDailyPrizeUpdated
  | DailyPrizeTicketAdded
  | KFBurnAddressUpdated
  | KFCustodyAddressUpdated
  | KFDailyPrizeAddressUpdated
  | KingdomFeeDeducted
  | OwnershipTransferred
  | WinBattleFunds;

export interface CryptoPropheciesGameInstance extends Truffle.ContractInstance {
  GCs(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  MAX_BATTLE_DURATION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MPOT(txDetails?: Truffle.TransactionDetails): Promise<string>;

  TCP(txDetails?: Truffle.TransactionDetails): Promise<string>;

  battleId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  battles(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string; 3: BN; 4: BN; 5: BN; 6: BN }>;

  createBattle: {
    (
      _player1: string,
      _player1ProphetId: number | BN | string,
      _player2: string,
      _player2ProphetId: number | BN | string,
      _wagerAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _player1: string,
      _player1ProphetId: number | BN | string,
      _player2: string,
      _player2ProphetId: number | BN | string,
      _wagerAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _player1: string,
      _player1ProphetId: number | BN | string,
      _player2: string,
      _player2ProphetId: number | BN | string,
      _wagerAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _player1: string,
      _player1ProphetId: number | BN | string,
      _player2: string,
      _player2ProphetId: number | BN | string,
      _wagerAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ctDailyPrize(txDetails?: Truffle.TransactionDetails): Promise<string>;

  endBattle: {
    (
      _battleId: number | BN | string,
      _winner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _battleId: number | BN | string,
      _winner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _battleId: number | BN | string,
      _winner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _battleId: number | BN | string,
      _winner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  kfBurnAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kfCustodyAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kfDailyPrizeAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  multipliers(
    arg0: number | BN | string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  prophetAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setGC: {
    (
      _account: string,
      _value: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _value: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _value: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _value: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateCTDailyPrize: {
    (_contract: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _contract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _contract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateKFBurnAddress: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateKFCustodyAddress: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateKFDailyPrizeAddress: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateMPOT: {
    (_MPOT: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_MPOT: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _MPOT: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _MPOT: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateMultipliers: {
    (
      _tiers: (number | BN | string)[],
      _winMultipliers: (number | BN | string)[],
      _loseMultipliers: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tiers: (number | BN | string)[],
      _winMultipliers: (number | BN | string)[],
      _loseMultipliers: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tiers: (number | BN | string)[],
      _winMultipliers: (number | BN | string)[],
      _loseMultipliers: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tiers: (number | BN | string)[],
      _winMultipliers: (number | BN | string)[],
      _loseMultipliers: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateProphetContractAddress: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    GCs(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    MAX_BATTLE_DURATION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MPOT(txDetails?: Truffle.TransactionDetails): Promise<string>;

    TCP(txDetails?: Truffle.TransactionDetails): Promise<string>;

    battleId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    battles(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string; 3: BN; 4: BN; 5: BN; 6: BN }>;

    createBattle: {
      (
        _player1: string,
        _player1ProphetId: number | BN | string,
        _player2: string,
        _player2ProphetId: number | BN | string,
        _wagerAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _player1: string,
        _player1ProphetId: number | BN | string,
        _player2: string,
        _player2ProphetId: number | BN | string,
        _wagerAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _player1: string,
        _player1ProphetId: number | BN | string,
        _player2: string,
        _player2ProphetId: number | BN | string,
        _wagerAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _player1: string,
        _player1ProphetId: number | BN | string,
        _player2: string,
        _player2ProphetId: number | BN | string,
        _wagerAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    ctDailyPrize(txDetails?: Truffle.TransactionDetails): Promise<string>;

    endBattle: {
      (
        _battleId: number | BN | string,
        _winner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _battleId: number | BN | string,
        _winner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _battleId: number | BN | string,
        _winner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _battleId: number | BN | string,
        _winner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    kfBurnAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

    kfCustodyAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

    kfDailyPrizeAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

    multipliers(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    prophetAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setGC: {
      (
        _account: string,
        _value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateCTDailyPrize: {
      (_contract: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _contract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _contract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _contract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateKFBurnAddress: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateKFCustodyAddress: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateKFDailyPrizeAddress: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateMPOT: {
      (_MPOT: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _MPOT: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _MPOT: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _MPOT: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateMultipliers: {
      (
        _tiers: (number | BN | string)[],
        _winMultipliers: (number | BN | string)[],
        _loseMultipliers: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tiers: (number | BN | string)[],
        _winMultipliers: (number | BN | string)[],
        _loseMultipliers: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tiers: (number | BN | string)[],
        _winMultipliers: (number | BN | string)[],
        _loseMultipliers: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tiers: (number | BN | string)[],
        _winMultipliers: (number | BN | string)[],
        _loseMultipliers: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateProphetContractAddress: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
